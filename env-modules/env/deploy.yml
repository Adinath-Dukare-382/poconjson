trigger: none


pool: SamplePool

stages:
  - stage: azurescript
    jobs:
      - job:
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # $appservicePlan = $(az appservice plan list --query "[?tags.env=='$(env)' && tags.owner=='$(owner)']" | ConvertFrom-Json)
                # $fileName = "terraform.tfvars.json"
                # $data = @{}
                # $apps = @{}
                # $app = @{}

                # $app.Add("app_name","$(project)")
                # $app.Add("version","$(version)")
                # $apps.Add("app",$app)

                # $data.Add("plan_name",$appservicePlan.name)
                # $data.Add("plan_id",$appservicePlan.id)
                # $data.Add("location",$appservicePlan.location)
                # $data.Add("resource_group_name",$appservicePlan.resourceGroup)
                # $data.Add("env","$(env)")
                # $data.Add("apps",$apps)
                # $data.Add("tags",$appservicePlan.tags)
                # $data | ConvertTo-Json | set-content -Path $fileName
                


                $appservicePlan = $(az appservice plan list --query "[?tags.env=='$(env)' && tags.owner=='$(owner)']" | ConvertFrom-Json)
                write-output $appservicePlan
                # $fileName = "$(Build.SourcesDirectory)/POCJson/env/terraform.tfvars.json"
                $fileName = "terraform.tfvars.json"
                $data = Get-Content -path $fileName -Raw | ConvertFrom-Json
                $data.plan_id = $appservicePlan.id
                $data.plan_name = $appservicePlan.name
                $data.resource_group_name = $appservicePlan.resourceGroup
                $data.location = $appservicePlan.location
                $data.env = '$(env)'
                $data.apps.app.app_name = '$(appname)'
                $data | ConvertTo-Json | set-content -Path $fileName

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'get-content $(Build.SourcesDirectory)\terraform.tfvars.json'

          - task: TerraformCLI@0
            displayName: "terraform init"
            enabled: true
            inputs:
              command: "init"
              backendServiceArm: "Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)"
              allowTelemetryCollection: true
              workingDirectory: "$(Build.SourcesDirectory)/POCJson/env"
         
          - task: TerraformCLI@0
            displayName: "terraform plan"
            enabled: true
            inputs:
              command: 'plan'
              workingDirectory: "$(Build.SourcesDirectory)/POCJson/env"
              environmentServiceName: "Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)"
              commandOptions: '-out=tfplan'
              allowTelemetryCollection: true
            
          - task: TerraformCLI@0
            displayName: "terraform apply"
            enabled: true
            inputs:
              command: 'apply'
              workingDirectory: "$(Build.SourcesDirectory)/POCJson/env"
              environmentServiceName: "Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)"
              commandOptions: 'tfplan'
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))
           

    
  # - template: ../templates/terraform-deploy.yml
  #   parameters:
  #     environment: ${{ variables.env }}
  #     working_dir: "$(Build.SourcesDirectory)/POCJson/env"
  #     serviceconn_name : "svc-poc2"
  #     tfresourcegroupname : "config-demo2"
  #     tfstorageaccountname : "globalstorageac"
  #     azureRmContainerName : "globalstoragecon2"
  #     tfstatefile : "terraform-tfstate.tfstate"
