parameters:
  - name: environment
    type: string

  - name: working_dir
    type: string

  - name: azureRmContainerName
    type: string

  - name: tfstatefile
    type: string

  - name: serviceconn_name
    default: 'poc-svc2'
    type: string

  - name: tfresourcegroupname
    default: 'config-demo2'
    type: string

  - name: tfstorageaccountname
    default: 'globalstorageac'
    type: string

stages:
  - stage: Terraform_${{ parameters.environment }}
    displayName: "Terraform Provisioning - ${{ parameters.environment }}"
    jobs:
      - job: terraform_provisioning
        displayName: "Deploy resources - Terraform"
        timeoutInMinutes: 180

        steps:
          - task: TerraformCLI@0
            displayName: "terraform init"
            enabled: true
            inputs:
              command: "init"
              backendServiceArm: ${{ parameters.serviceconn_name }}
              backendType: "azurerm"
              backendAzureRmResourceGroupName: ${{ parameters.tfresourcegroupname }}
              backendAzureRmStorageAccountName: ${{ parameters.tfstorageaccountname }}
              backendAzureRmContainerName: ${{ parameters.azureRmContainerName }}
              backendAzureRmKey: ${{ parameters.tfstatefile }}
              allowTelemetryCollection: true
              workingDirectory: ${{ parameters.working_dir }}
              
          - task: TerraformCLI@0
            displayName: "terraform import resource"
            enabled: false
            inputs:
              command: 'import'
              workingDirectory: '${{ parameters.working_dir }}'
              environmentServiceName: ${{ parameters.serviceconn_name }}
              allowTelemetryCollection: true
              resourceAddress: 'module.common.azurerm_application_insights.application-insights'
              resourceId: '/subscriptions/3ff91757-336c-4190-94b7-dd26eb7ed5f2/resourceGroups/poh-business-services-nonprod-appsvc/providers/microsoft.insights/components/appi-poh-dev-eastus-001'

          - bash: terraform state rm 'module.common.azurerm_app_service.app-service["GraphQLAPI"]'
            enabled: false
            workingDirectory: ${{ parameters.working_dir }}

          - task: TerraformCLI@0
            displayName: "terraform plan"
            enabled: true
            inputs:
              command: 'plan'
              workingDirectory: '${{ parameters.working_dir }}'
              environmentServiceName: ${{ parameters.serviceconn_name }}
              commandOptions: '-out=tfplan'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: "terraform apply"
            enabled: True  
            inputs:
              command: 'apply'
              workingDirectory: '${{ parameters.working_dir }}'
              environmentServiceName: ${{ parameters.serviceconn_name }}
              commandOptions: 'tfplan'
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))

          - task: TerraformCLI@0
            displayName: "terraform destroy"
            enabled: false
            inputs:
              command: 'destroy'
              workingDirectory: '${{ parameters.working_dir }}'
              environmentServiceName: ${{ parameters.serviceconn_name }}
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformDestroy'], 'True'))
